name: Build V8

on: [workflow_dispatch]

jobs:
  build:
    name: host=${{ matrix.config.host }} target=${{ matrix.config.target }} mode=${{ matrix.config.mode }} 
    runs-on: ${{ matrix.config.host }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - host: ubuntu-20.04
            target: x86_64-linux
            mode: release
          - host: macos-10.15
            target: x86_64-macos
            mode: release
          - host: windows-2019
            target: x86_64-windows-msvc
            mode: release
    env:
      ARCH_OS: ${{ startsWith(matrix.config.target, 'x86_64-windows') && 'x86_64-windows' || matrix.config.target }}
      BUILD_TARGET: ${{ matrix.config.target }}
      BUILD_MODE: ${{ matrix.config.mode }}
      LIB_NAME: ${{ contains(matrix.config.target, 'windows') && 'c_v8' || 'libc_v8' }}
      LIB_EXT: ${{ contains(matrix.config.target, 'windows') && 'lib' || 'a' }}
    steps:
      - name: Clone repo.
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Get build tag.
        shell: bash
        # Need single quotes or path sep becomes escapes on windows host. xargs does trimming.
        run: echo "BUILD_TAG=$(cat '${{ github.workspace }}/V8_REVISION' | xargs)" >> $GITHUB_ENV

      - name: Create/Update tag.
        uses: actions/github-script@v5
        with:
          script: |
            const ref = 'tags/${{ env.BUILD_TAG }}';
            const res = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ env.BUILD_TAG }}',
            });
            if (res.data.length > 0) {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ env.BUILD_TAG }}',
                sha: context.sha,
              });
            } else {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                // Only create needs full path
                ref: 'refs/tags/${{ env.BUILD_TAG }}',
                sha: context.sha,
              });
            }

      - name: Install zig.
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master

      - name: Cache.
        uses: actions/cache@v2
        with:
          # Restore sccache so subsequent runs can reuse the cache.
          # TODO: Might be useful to restore some of v8 source deps so get-v8 does less work.
          path: |-
            sccache
          key:
            # The cache can behave unexpectedly, so sometimes we need to set a unique key to reset everything. Usually when we change the path.
            # c_v8-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-${{ github.sha }}
            c_v8-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-
          restore-keys:
            c_v8-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-

      - name: Install and start sccache.
        shell: pwsh
        env:
          SCCACHE_DIR: ${{ github.workspace }}/sccache
          # Compiling all of v8 takes up about 100M for debug builds so this is a good starting point.
          SCCACHE_CACHE_SIZE: 128M
          SCCACHE_IDLE_TIMEOUT: 0
        run: |
          $version = "v0.2.15"
          $platform =
            @{ "macOS"   = "x86_64-apple-darwin"
               "Linux"   = "x86_64-unknown-linux-musl"
               "Windows" = "x86_64-pc-windows-msvc"
             }.${{ runner.os }}
          $basename = "sccache-$version-$platform"
          $url = "https://github.com/mozilla/sccache/releases/download/" +
                 "$version/$basename.tar.gz"
          cd ~
          curl -LO $url
          tar -xzvf "$basename.tar.gz"
          chmod a+x $basename/sccache
          . $basename/sccache --start-server
          echo "$(pwd)/$basename" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Get V8 Tools.
        run: zig build get-tools

      - name: Get V8 Source.
        run: zig build get-v8

      - name: Build release.
        if: env.BUILD_MODE == 'release'
        run: zig build -Drelease-safe

      - name: Build debug.
        if: env.BUILD_MODE == 'debug'
        run: zig build

      - name: Copy binary.
        continue-on-error: true
        run: cp
          v8-out/${{ env.ARCH_OS }}/${{ env.BUILD_MODE }}/ninja/obj/zig/${{ env.LIB_NAME }}.${{ env.LIB_EXT }}
          v8-out/${{ env.LIB_NAME }}_${{ env.BUILD_TARGET }}_${{ env.BUILD_MODE }}_${{ env.BUILD_TAG }}.${{ env.LIB_EXT }}

      - name: Github Release.
        uses: softprops/action-gh-release@v0.1.14
        # Github requires tags for releases.
        #if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: Release
          name: ${{ env.BUILD_TAG }}
          tag_name: ${{ env.BUILD_TAG }}
          files: v8-out/${{ env.LIB_NAME }}_${{ env.BUILD_TARGET }}_${{ env.BUILD_MODE }}_${{ env.BUILD_TAG }}.${{ env.LIB_EXT }}

      - name: Stop sccache.
        if: always()
        run: |
          sccache --show-stats
          sccache --stop-server
