name: Build V8 (Single)

on: 
  workflow_dispatch:
    inputs:
      host:
        type: choice
        description: Host
        options:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019
      target:
        type: choice
        description: Target
        options:
          - x86_64-linux
          - x86_64-macos
          - x86_64-windows-msvc
      mode:
        type: choice
        description: Mode
        options:
          - release

jobs:
  build:
    name: host=${{ github.event.inputs.host }} target=${{ github.event.inputs.target }} mode=${{ github.event.inputs.mode }} 
    runs-on: ${{ github.event.inputs.host }}
    env:
      ARCH_OS: ${{ startsWith(github.event.inputs.target, 'x86_64-windows') && 'x86_64-windows' || github.event.inputs.target }}
      LIB_NAME: ${{ contains(github.event.inputs.target, 'windows') && 'c_v8' || 'libc_v8' }}
      LIB_EXT: ${{ contains(github.event.inputs.target, 'windows') && 'lib' || 'a' }}
      BUILD_TARGET: ${{ github.event.inputs.target }}
      BUILD_MODE: ${{ github.event.inputs.mode }}
    steps:
      - name: Clone repo.
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install zig.
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Cache.
        uses: actions/cache@v2
        with:
          # Restore sccache so subsequent runs can reuse the cache.
          # TODO: Might be useful to restore some of v8 source deps so get-v8 does less work.
          path: |-
            ${{ github.workspace }}/sccache
          key:
            c_v8-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-
          # restore-keys doesn't do much here but keep it in case we need it later.
          restore-keys:
            c_v8-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-
      - name: Install and start sccache.
        shell: pwsh
        env:
          SCCACHE_DIR: ${{ github.workspace }}/sccache
          # Compiling all of v8 takes up about 100M for debug builds so this is a good starting point.
          SCCACHE_CACHE_SIZE: 128M
          SCCACHE_IDLE_TIMEOUT: 0
        run: |
          $version = "v0.2.15"
          $platform =
            @{ "macOS"   = "x86_64-apple-darwin"
               "Linux"   = "x86_64-unknown-linux-musl"
               "Windows" = "x86_64-pc-windows-msvc"
             }.${{ runner.os }}
          $basename = "sccache-$version-$platform"
          $url = "https://github.com/mozilla/sccache/releases/download/" +
                 "$version/$basename.tar.gz"
          cd ~
          curl -LO $url
          tar -xzvf "$basename.tar.gz"
          chmod a+x $basename/sccache
          . $basename/sccache --start-server
          echo "$(pwd)/$basename" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Get V8 Tools.
        run: zig build get-tools
      - name: Get V8 Source.
        run: zig build get-v8
      - name: Build release.
        if: env.BUILD_MODE == 'release'
        run: zig build -Drelease-safe
      - name: Build debug.
        if: env.BUILD_MODE == 'debug'
        run: zig build
      - name: Copy binary.
        if: always()
        run: cp
          v8-out/${{ env.ARCH_OS }}/${{ env.BUILD_MODE }}/ninja/obj/zig/${{ env.LIB_NAME }}.${{ env.LIB_EXT }}
          v8-out/${{ env.LIB_NAME }}_${{ env.BUILD_TARGET }}_${{ env.BUILD_MODE }}.${{ env.LIB_EXT }}
      - name: Github Release.
        uses: softprops/action-gh-release@59c3b4891632ff9a897f99a91d7bc557467a3a22
        # Github requires tags for releases.
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: v8-out/${{ env.LIB_NAME }}_${{ env.BUILD_TARGET }}_${{ env.BUILD_MODE }}.${{ env.LIB_EXT }}
      - name: Stop sccache.
        if: always()
        run: |
          sccache --show-stats
          sccache --stop-server
