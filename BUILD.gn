# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.
# Based on https://github.com/denoland/rusty_v8/blob/main/BUILD.gn
import("//build/config/host_byteorder.gni")
import("//build/toolchain/gcc_toolchain.gni")
import("//build/config/c++/c++.gni")

static_library("c_v8") {
  complete_static_lib = true

  sources = [ "../../src/binding.cpp" ]
  deps = [
    "//build/config:shared_library_deps",
    "//:v8",
    "//:v8_libbase",
    "//:v8_libplatform",
  ]
  configs -= [
    "//build/config/compiler:default_init_stack_vars",
    "//build/config/compiler:thin_archive",
  ]
  configs += [ ":c_v8_config" ]
}

config("c_v8_config") {
  configs = [
    "//:external_config",
    "//:toolchain",
    "//:features",
  ]
  cflags = []

  # We need these directories in the search path to be able to include some
  # internal V8 headers.
  include_dirs = [
    "v8",
    "$target_gen_dir/v8",
  ]

  if (is_debug) {
    defines = [ "DEBUG" ]
  }

  if (is_clang) {
    cflags += [
      "-fcolor-diagnostics",
      "-fansi-escape-codes",
    ]
  }

  if (is_debug && is_clang && !is_win) {
    cflags += [ "-glldb" ]
  }
}

# Based on template("clang_toolchain") in build/toolchain/gcc_toolchain.gni
template("zig_toolchain") {
  gcc_toolchain(target_name) {
    cc = "zig cc"
    cxx = "zig c++"
    # ld commands in v8 use cxx with -fuse-ld
    ld = cxx
    #ar = "${prefix}/llvm-ar"
    ar = "zig ar"

    prefix = rebase_path("$clang_base_path/bin", root_build_dir)
    readelf = "${prefix}/llvm-readelf"
    # Is this even used?
    nm = "${prefix}/llvm-nm"

    if (current_cpu == "x64" && current_os == "linux") {
      # From //build/toolchain/linux:clang_x64

      # Output linker map files for binary size analysis.
      enable_linker_map = true
    }

    forward_variables_from(invoker,
      [
        "strip",
        "default_shlib_subdir",
        "dwp",
        "enable_linker_map",
        "loadable_module_extension",
        "use_unstripped_as_runtime_outputs",
        "extra_cppflags",
        "extra_cxxflags",
        "extra_ldflags",
        "extra_asmflags",
      ])

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
      is_clang = true
    }
  }
}

# Used to compile the v8 library.
zig_toolchain("main_zig_toolchain") {
  extra_cppflags = zig_cppflags
  extra_cxxflags = zig_cxxflags
  extra_ldflags = zig_ldflags
  extra_asmflags = zig_asmflags
  toolchain_args = {
    current_cpu = target_cpu
    current_os = target_os
  }
}

# Used to compile v8 snapshots/generators to run locally.
# v8_current_cpu indicates that we are still targeting a different arch but must compile tools to run on host machine.
# See gni/snapshot_toolchain.gni
zig_toolchain("v8_zig_toolchain") {
  extra_cppflags = v8_zig_cppflags
  extra_cxxflags = v8_zig_cxxflags
  extra_ldflags = v8_zig_ldflags
  toolchain_args = {
    current_os = host_os
    current_cpu = host_cpu
    v8_current_cpu = target_cpu
  }
}